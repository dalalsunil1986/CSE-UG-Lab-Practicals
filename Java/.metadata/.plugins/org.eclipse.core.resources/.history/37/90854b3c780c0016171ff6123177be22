import java.util.ArrayList;
import java.util.Arrays;

public class equalAvgPart {
	/*Given an array with non negative numbers, divide the array into two parts such that the average of both the 
	 * parts is equal. Return both parts (If exist). If there is no solution. return an empty list. * */
	
	static double avgT = 0;
	
	public boolean subsetSum(int a[], int total) {
		//Find if any subset sums up to total
        boolean T[][] = new boolean[a.length + 1][total + 1];
        for (int i = 0; i <= a.length; i++) {
            T[i][0] = true;
        }

        for (int i = 1; i <= a.length; i++) {
            for (int j = 1; j <= total; j++) {
                if (j - a[i - 1] >= 0) {
                    T[i][j] = T[i - 1][j] || T[i - 1][j - a[i - 1]];
                } else {
                    T[i][j] = T[i-1][j];
                }
            }
        }
        return T[a.length][total];
    }

	public boolean subsetKSum(int a[], int S, int subsetLen){
		//Find a subset of size subsetLen that sums up to S
		
		
		int n = a.length;
		boolean [][][] T = new boolean[subsetLen+1][n+1][S+1];
		   
		  for (int i=0; i<=n; i++) {
		   T[0][i][0] = true;
		  }
		  
		  for (int k = 1; k < subsetLen; k++){
			  for (int i = 1; i < n; i++){
				  for (int j = 1; j <= S; j++){
					  if (a[i] < j)
						  T[k][i][j] = T[k -1][i -1][j]; //just get the value from the top
					
					  T[k][i][j] = T[k][i][j] || T[k][i-1][j];
					  if (T[k][i][j]){	//if the value is true
						  double avg = j/(double)k;		//sum/size
						  if (Math.abs(avg - avgT) <= 0.00001){
							  
						  }
					  }
				  }
			  }
		  }
		  
		 if (found == false)
			 return null;
		 return false;
	}
	
	
	
	public ArrayList<ArrayList<Integer>> avgset(ArrayList<Integer> a) {
		ArrayList<ArrayList<Integer>> arrayList = new ArrayList<>();
		
		int totalSum = a.stream().mapToInt(Integer::intValue).sum();
		int totalSize = a.size();
		avgT = totalSum / (double)totalSize;
		
		
		boolean found = false;
		
		for (int i = 1; i < totalSize -1; i++){
			double sumSmall = avg * i;
			if (sumSmall == Math.floor(sumSmall)){ //if it's an integer
				//if subset of size i is found with sum == sumSmall, we have an answer
				
				
				
			}
			
			if (found)
				break;
			
		}
		
		
		return arrayList;
	}
	
	public static void main(String[] args) {
		System.out.println(new equalAvgPart().avgset(new ArrayList<>(Arrays.asList(1, 7, 15, 29 , 11, 9))));
		
		int t[] = {1, 7, 15, 29, 11, 9};
		System.out.println(new equalAvgPart().subsetSum(t, 13));
	
	}
	
}
