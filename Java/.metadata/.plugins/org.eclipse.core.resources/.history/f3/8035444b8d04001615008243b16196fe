import java.util.*;

public class maxProductSub {
	//Find the contiguous sub array within an array (containing at least one number) which has the largest product.
	//Return an integer corresponding to the maximum product possible.
	
	public int maxProduct(final List<Integer> a) {
		
		if (a.size() < 1)
			return 0;
		
		int maxSoFar, maxEndingHere, minEndingHere;
		maxEndingHere = minEndingHere = maxSoFar = 1;
		
		//Handle zero case
		boolean pos = false;
		for (int i : a)
			if (i >= 0){
				pos = true;
				break;
			}
		if (pos == false)
			return 0;

		//Handle odd negatives
		int numNeg = 0;
		for (int i : a)
			if (i < 0)
				numNeg ++;
		
		if (numNeg %2 == 1 && pos == false)
			return 0;
		
		for (int i = 0; i < a.size(); i++){
			if (a.get(i) == 0)
				maxEndingHere = minEndingHere = 1;
			
			else if (a.get(i) > 0){
				maxEndingHere *= a.get(i);
				minEndingHere = Math.min(minEndingHere * a.get(i), 1);
			}
			else { //handle negatives
				int temp = maxEndingHere;
				maxEndingHere = Math.max(minEndingHere * a.get(i), 1);
				minEndingHere = temp * a.get(i);
			}
			maxSoFar = Math.max(maxEndingHere, maxSoFar);
		}
		
		return maxSoFar;
	}

	
	public static void main(String[] args) {
		
		
		System.out.println(new maxProductSub().maxProduct(Arrays.asList(1, -2, -3, 0, 7, -8, -2)));
		
	}
}








