import java.util.*;

public class jumpGame {
	/*Given an array of non-negative integers, you are initially positioned at the first index of the array.
		Each element in the array represents your maximum jump length at that position.
		Determine if you are able to reach the last index*/
	
	public int minimumJumps(ArrayList<Integer> a){
		//Minimum jump to reach from start to end, else INT_MAX
		int n = a.size();
		int J[] = new int[n];
		for (int i = 0; i < n; i++)
			J[i] = Integer.MAX_VALUE;
		
		J[0] = 0;
		
		for (int i = 1; i < n; i++){
			for (int j = 0; j < i; j++){
				if (a.get(j) + j >= i)
					J[i] = Math.min(J[i], J[j]+ 1);
			}
		}
//		
//		for (int i = 0; i < n; i++)
//			System.out.print(J[i] + " ");
		
		return J[n -1];
	}
	
	public int canJump(ArrayList<Integer> a) {
		if (a.size() == 1)
			return a.get(0) == 0 ? 1 : 0;
		
		int minStepsEnd = minimumJumps(a);
		return (minStepsEnd == Integer.MAX_VALUE) ? 0 : 1;
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println(new jumpGame().canJump(new ArrayList<Integer>(Arrays.asList(2, 3, 1, 1, 2, 4, 2, 0, 1,1 ))));
	}

}
